Analyze:
- meta types: primitive, complex, collection
- type is tree where each node is one of meta types
- instance of type is tree too but with values

Features todo:
- Structures!
- Add support for DataCollectionAttribute
- Strong identify what types should be serialized (marked with Serialize or Data attributes or smth else)
- Handling of unknown elements while deserialize (add settings).
- DateTimeOffset
- NameValueCollection
- Add cycling protection
- Add strategies to handle unknown types
- Think about inheritance (so called 'known types')
- Multi dimensional arrays (quad and jagged)
- Typeless serialization (store full type name in xml) (?)
- Support of heterogeneous collections (store full type name in xml) (?)

Features:
- Serialization of primitive types: bool, int, long, float, double, decimal, string, TimeSpan, DateTime
- Serialization of collection types: Array, IList, ICollection, IEnumerable, IDictionary and theirs generic analogs
- Serialization of complex types
- Serialization of enum types
- Serialization of nullable types
- Support of Xml* attributes to provide element names (XmlRoot, XmlElement, XmlArray, XmlArrayItem, XmlAttribute)
- Support of Data* attributes to provide element names (DataContract, DataMember)
- Naming conventions
- Extensibility point for custom serialization of values of specified type
- Extensibility point for custom serialization of values of specified type as primitives

Notes:
- There is may be no invariance when serialize/deserialize collection with null items.
- Add extension to serialize into file.
- Add extension to serialize into Stream.